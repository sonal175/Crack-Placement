// Flatten Binary tree into linked list

//Recursive Approach
void solve(TreeNode*root,TreeNode*&prev){
        if(root==NULL){
            return ;
        }
        solve(root->right,prev);
        solve(root->left,prev);
            root->right=prev;
            root->left=NULL;
            prev=root;
    }
    void flatten(TreeNode* root) {
        TreeNode *prev=NULL;
        solve(root,prev);
        
        
    }
    
    //Iterative Approach
    
     void flatten(TreeNode* root) {
        if(root==NULL) return;
        stack<TreeNode*>s;
        s.push(root);
        while(s.size()>0){
            TreeNode* curr=s.top();
            s.pop();
            if(curr->right!=NULL){
                s.push(curr->right);
            }
            if(curr->left!=NULL){
                s.push(curr->left);
            }
            if(!s.empty()){
                curr->right=s.top();
            }
            curr->left=NULL;
            
        }
    }
