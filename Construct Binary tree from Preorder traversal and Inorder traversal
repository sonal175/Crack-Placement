// Construct Binary tree from preorder and inorder traversal

TreeNode* build(vector<int>&preorder,int ps,int pe,vector<int>&inorder,int is,int ie){
        if(is>ie || ps>pe){
            return NULL;
        }
        int val=preorder[ps];
        TreeNode*root=new TreeNode(val);
        int k=0;
        for(int i=is;i<=ie;i++){
            if(inorder[i]==val){
                k=i;
                break;
            }
        }
        int lis=is;
        int lie=k-1;
        int lps=ps+1;
        int lpe=(lie-lis)+lps;
        root->left=build(preorder,lps,lpe,inorder,lis,lie);
        int ris=k+1;
        int rie=ie;
        int rps=lpe+1;
        int rpe=pe;
        root->right=build(preorder,rps,rpe,inorder,ris,rie);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        
        return build(preorder,0,preorder.size()-1,inorder,0,inorder.size()-1);
        
        
    }
