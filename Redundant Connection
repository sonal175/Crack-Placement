// Redundant Connection


// Code--


 int parent[1001];
    int rank[1001];
     int find(int np){
            if(np==parent[np]){
                return np;
            }
            return parent[np]=find(parent[np]);
        }
    
    
        void uni(int u,int v){
            u=find(u);
            v=find(v);
            if(rank[u]<rank[v]){
                parent[u]=v;
            }else if(rank[u]>rank[v]){
                parent[v]=u;
            }else{
                parent[u]=v;
                rank[v]++;
            }
        }
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        
        vector<int>v;
        for(int i=0;i<1001;i++){
            parent[i]=i;
            rank[i]=0;
        }
        
       
            
        
        for(int i=0;i<edges.size();i++){
            
            if(find(edges[i][0])!=find(edges[i][1])){
                uni(edges[i][0],edges[i][1]);
            }else{
                v.push_back(edges[i][0]);
                v.push_back(edges[i][1]);
                break;
            }
        }
        return v;
    }
