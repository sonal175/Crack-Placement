// kth ancestor of a node in binary tree


// t-o(n), s-o(n)
int kthAncestor(Node *root, int k, int node)
{
    // Code here
    queue<Node*>q;
    unordered_map<int,int>m;
    q.push(root);
    m[root->data]=-1;
    while(q.size()>0){
        Node* p=q.front();
        q.pop();
        if(p->left!=NULL){
            m[p->left->data]=p->data;
            q.push(p->left);
        }
        if(p->right!=NULL){
            m[p->right->data]=p->data;
            q.push(p->right);
        }
    }
    int cnt=0;
    while(node!=-1){
        node=m[node];
        cnt++;
        if(cnt==k){
            return node;
            break;
        }
        
    }
    return -1;
}

// optimosed approach with s:o(n)=1

bool val(Node*root,int node,int &k,int  &ans){
    if(root==NULL) return false;
    bool t1=val(root->left,node,k,ans);
    bool t2=val(root->right,node,k,ans);
    if(root->data==node || t1==true || t2==true){
        if(k==0){
            ans=root->data;
            return false;
        }else{
            k--;
            return true;
        }
    }
    return false;
}
int kthAncestor(Node *root, int k, int node)
{
    // Code here
    int ans=0;
    val(root,node,k,ans);
    if(ans==0){
        return -1;
    }
    return ans;
}


