// Lowest common Ancestor of a BST

TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root==NULL){
            return NULL;
        }
        if((p->val >= root->val && q->val<root->val) || (p->val<=root->val && q->val>root->val)){
            return root;
        }
        if((p->val > root->val && q->val<=root->val) || (p->val<root->val && q->val>=root->val)){
            return root;
        }
       else  if(p->val<root->val && q->val<root->val){
            return lowestCommonAncestor(root->left,p,q);
        }
        
            return lowestCommonAncestor(root->right,p,q);
        
        
    }
