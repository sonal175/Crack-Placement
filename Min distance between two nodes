// Min distance between two nodes in a binary tree

Node* lca(Node* root ,int n1 ,int n2 )
    {
       //Your code here 
        if(root==NULL){
            return NULL;
        }
        if(root->data==n1|| root->data==n2){
            return root;
        }
        Node*l=lca(root->left,n1,n2);
        Node*r=lca(root->right,n1,n2);
        if(l!=NULL && r!=NULL){
            return root;
        }else if(l!=NULL){
            return l;
        }
        return r;
    }
    int solve(Node*root, int a){
        if(root==NULL) return 0;
        if(root->data==a){
            return 1;
        }
        int a1=solve(root->left,a);
        int a2=solve(root->right,a);
        if(a1==0 && a2==0) return 0;
        return max(a1,a2)+1;
    }
    int findDist(Node* root, int a, int b) {
        // Your code here
        Node * low=lca(root,a,b);
        int d1=solve(low,a);
        int d2=solve(low,b);
        if(d1==0 || d2==0){
            return -1;
        }else{
            return d1+d2-2;
        }
    }
    
    // optimised approach require one pass
    
     int ans;
    int dist(Node*root,int a,int b){
        
           if(root==NULL) return 0;
        int l=dist(root->left,a,b);
        int r=dist(root->right,a,b);
        if(root->data==a || root->data==b){
            if(l!=0 || r!=0){
                ans= max(l,r);
                return 0;
            }else{
                return 1;
            }
        }
        if(l!=0 && r!=0){
             ans=l+r;
             return 0;
        }else if(l!=0 || r!=0){
            
            return max(l,r)+1;
        }
        return 0;
    
    }
    int findDist(Node* root, int a, int b) {
        // Your code here
         ans=0;
        dist(root,a,b);
        return ans;
    }
