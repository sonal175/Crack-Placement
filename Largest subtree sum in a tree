// Largest subtree sum in a tree


pair<int,int> sum(TreeNode<int>*root){
    if(root==NULL){
        pair<int,int>a;
        a.first=0;
        a.second=-1001;
        return a;
    }
    if(root->left==NULL && root->right==NULL){
        pair<int,int>a;
        a.first=root->data;
        a.second=root->data;
        return a;
    }
    pair<int,int>l=sum(root->left);
    pair<int,int>r=sum(root->right);
    int v=root->data+l.first+r.first;
    int m=v;
    m=max(v,max(l.second,r.second));
    pair<int,int>ans;
    ans.first=v;
    ans.second=m;
    return ans;
}
int largestSubtreeSum(TreeNode<int> *root) {
	// Write your code here.
    pair<int,int>ans=sum(root);
    return ans.second;
}
