// Construct BST from poreorder traversal

---- o(n^2)
TreeNode * bst(vector<int>&preorder, int i, int j){
        if(i>j){
            return NULL;
        }
        TreeNode* root=new TreeNode(preorder[i]);
        int v=preorder[i];
        int index=0;
        int k;
        for(k=i+1;k<=j;k++){
            if(preorder[k]>v){
                index=k;
                break;
            }
        }
        root->left=bst(preorder,i+1,k-1);
        root->right=bst(preorder,k,j);
        return root;
            
        
    }
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        return bst(preorder,0,preorder.size()-1);
    }
    
    
    
    // Optimised Approach o(n)
    
    TreeNode* bst(vector<int>&preorder,int &i,int bound){
        if(i==preorder.size() || preorder[i]>bound) return NULL;
        TreeNode * root=new TreeNode(preorder[i]);
        i++;
        root->left=bst(preorder,i,root->val);
        root->right=bst(preorder,i,bound);
        return root;
    }
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        int i=0;
        int bound=INT_MAX;
        return bst(preorder,i,bound);
    }
